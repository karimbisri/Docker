
Ressources : 
------------
✅ Github repo : https://gitlab.com/nanuchi/techworld-js-docker-demo-app.git

- Container is a running environnement for IMAGE
1. application image : postgres, mongo, redis ...
2. port binded : talk to application running inside of container
3. virtual file system
$ docker pull redis

✔️ ========= DEBUGING containers =============
docker run = docker pull + docker start
docker stop
docker start
docker run -d -pHostPort:ContainerPort
-d : detached mode
-p : port
docker ps -a : running and dtopped containers
docker images
docker rm container-id


✔️ =========== TROUBSHOUTING COMMANDS ============
docker run --name some-redis -d redis
docker logs cotainer_id

##Running  a new redis container (different port number)
$ docker run --name redis-older -d -p6001:6379 redis:4.0 

- stop the first container:
$ docker stop cc06ca1a2f15

- docker logs :
$ docker logs redis-older

- Log into container :
docker exec -it 02b9f3685296 /bin/bash
because images are created to be light weight, so if we need curl for example : 
root@02b9f3685296:/data# apt-get install curl


✔️ =========== DEMO PROJECT OVERVIEW =============
how docker is used in : [Development - CICD - Deployment]
- JS ans NodeJS App
- MongoDB Docker Container
- MongoExpress Container for UI

Let's go:
---------
- pull mongo images:
$ docker pull mongo
$ docker pull mongo-express

- Run both mongo and mongo-express Containers : 
- BUT WAIT, we must configure NETWORKING between the two containers
$ docker network create mongo-network
$ docker network ls
  NETWORK ID     NAME            DRIVER    SCOPE
  43d20053baa6   bridge          bridge    local
  9106c70c01ca   host            host      local
  a478887066fb   minikube        bridge    local
  6547d0246cfc   mongo-network   bridge    local
  52d2c05165f4   none            null      local

- Run mongodb server
$ docker run -d \
-p 27017:27017 \
-e MONGO_INITDB_ROOT_USERNAME=admin \
-e MONGO_INITDB_ROOT_PASSWORD=password \
--name mongodb \
--net mongo-network \
mongo


- Run mongoexpress GUI:
docker run -d \
-p 8081:8081 \
-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
-e ME_CONFIG_MONGODB_ADMINPASSWORD=password \
-e ME_CONFIG_MONGODB_SERVER=mongodb \
--net mongo-network \
--name mongo-express \
mongo-express

=> connect to mongo-express to http://localhost:8081/
create a new database called user-account

- create user-account db and users collection in mongo-express
- Start your nodejs application locally - go to app directory of project
$ git clone https://gitlab.com/nanuchi/techworld-js-docker-demo-app.git
$ npm install 
$ node server.js

- Access you nodejs application UI from browser
http://localhost:3000

- update the user
- check logs of mongo container
$ docker logs 45954115ade4 | tail

- stream the logs on real time
$ docker logs 45954115ade4 -f


✔️ ########### DOCKER COMPOSE ############
=> TO start TWO (or many) CONTAINERS : mongoDB & mongo Express
🔔 NB: For docker compose, we dont need to create a neworking, docker compose do that !!!! 👍👍

▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️
📄 docker-compose.file:
version: "3"
services:
  mongodb:
    image: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password

  mongo-express:
    image: mongo-express
    ports:
      - 8082:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️

- To start the docker compose:
$ docker-compose -f docker_compose.yml up
- To Stop docker compose:
$ docker-compose -f docker-compose.yaml down

Stopping techworld-js-docker-demo-app_mongodb_1       ... done
Stopping techworld-js-docker-demo-app_mongo-express_1 ... done
Removing techworld-js-docker-demo-app_mongodb_1       ... done
Removing techworld-js-docker-demo-app_mongo-express_1 ... done
Removing network techworld-js-docker-demo-app_default

🔔 NB: Look the last line, it removes the network also 👍


✔️ ############# DOCKERFILES ###############
- We will simulate - using a JS application - what Jenkins does to package ad a DOCKER IMAGE our application 
and PUSH them in repositories

- What is dockerfile ??
is a blueprint (plan en français :p) for BUILDING IMAGES 🏗️

📄 DockerFile Syntax:
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️
▶️ FROM node    => equivalent to : install node

▶️ ENV MONGO_DB_USERNAME=admin \      => equivalent to : setMONGO_DB_USERNAME=admin
    MONGO_DB_PWD=pasword           => quivalent to :  set MONGO_DB_PWD=pasword

## RUN => execute any linux command 
▶️ RUN mkdir -p /home/app   => directory created INSIDE of the CONTAINER

## COPY => executes on the HOST MACHINE !!!!
▶️ COPY . /home/app         => copy current folder files to /home/app

# set default dir so that next commands executes in /home/app dir
▶️ WORKDIR /home/app

# will execute npm install in /home/app because of WORKDIR
▶️ RUN npm install

## CMD => enrypoint command
## you can have multiple RUN commands
▶️ CMD["node", "server.js"]  => equivalent to : node server.js
🔔 NB: Node is pre-installed because of base image 
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️

⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️
**********************************
** EVERY IMAGE USE A BASE IMAGE **
**********************************


- SO the diagram of images layers is like that
==================
= my-js-app:1.0  =   FROM node:13-alpine
==================
= node:13-alpine =   FROM alpine:3.10
==================
= alpine:3.10    =
==================


- Build docker image from dockerfile:
$ docker build -t (tag) my-app:1.0 .

- To Access container
$ docker exec -it 490d0b23b1b1 /bin/sh 



✔️ ############# PRIVATE DOCKER REGISTRY ############


✔️ ############# DOCER VOLUMES #######################

 🛢️ For DATA PERSISTENCE : DB, Statefull applications, ...

When do we need Docker Volumes ?
- Data is GONE when Restarting or Removing the Container ❌

What is Docker Volumes ❓

________________________________
|            HOST 🖥️           |
|   ________________________    |
|   |     CONTAINER🐳      |   |
|   |                       |   |
|   |  /var/lib/mysql/data ------------------> Virtual File System
|   |_______________________|   |
|                               |
|       /home/mount/data 🔌------------------> HOST FILE SYSTEM (PHYSICAL ⚠️)
|_______________________________|

- Folder in PHYSICAL host file system 🖥️ is MOUNTED or PLUGED🔌 into the virtual file system of container

- There is 3 types of volumes, but we will see just 2 : 

☑️ 1 : HOST VOLUMES:
--------------------
$ docker run -v /home/mount/data:/var/lib/mysql/data
-> /home/mount/data : Host directory
-> /var/lib/mysql/data : Container Directory
✅ you decide WHERE ON THE HOST FILE SYSTEM the reference is made


☑️ 2 : NAMED  VOLUMES  ( ⭐ the used one in production envs ):
---------------------------------------------------------------
$ docker run -v name:/var/lib/mysql/data
-> /var/lib/mysql/data : Container Directory
✅ you can REFERENCE the volume BY NAME
✅ Should be used in production



⬇️ Define NAMED VOLUME in docker-compose file ⬇️ :
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️
version: "3"
services:
  mongodb:
    image: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
  volumes:
    - mongo-data:/data/db     ## /data/db is the repo when mongo container store its data
                              ## that mean : attaching our volume "mongo-data" in the host to /data/db inside 
                              ## the container
                              ## 🔹 mysql : /var/lib/mysql
                              ## 🔹 postgres : /var/lib/postgres/data
  mongo-express:
    image: mongo-express
    ports:
      - 8082:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

volumes:              ## List all the volumes you are using in any of your containers
  mongo-data:         ## Name of the volume
    driver: local     ## Docker will create that PHYSICAL STORAGE 🛢️ in the LOCAL file system
▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️▫️

😀 Now you can Stop/Restart the docker compose and you will see that the data persist 👍👍

- Soo ... where the docker Volumes are located ❓❓
🛢️ For linux and Mac, DATA is STORED in /var/lib/docker/volumes



